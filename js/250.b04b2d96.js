(window["webpackJsonp"]=window["webpackJsonp"]||[]).push([[250],{f835:function(e,t,s){"use strict";s.r(t);var r=function(){var e=this,t=e.$createElement,s=e._self._c||t;return s("doc-page",{attrs:{"meta-title":e.metaTitle,title:"Resize Observer (for Element)",related:e.related,nav:e.nav,toc:e.toc,"meta-desc":e.metaDesc}},[s("p",[e._v("QResizeObserver is a Quasar component that emits a "),s("code",{staticClass:"doc-token"},[e._v("resize")]),e._v(" event whenever the wrapping DOM element / component (defined as direct parent of QResizeObserver) changes its size (width and/or height). Note that no polling is involved, but overusing it is costly too.")]),s("h2",{staticClass:"doc-heading doc-h2",attrs:{id:"qresizeobserver-api"},on:{click:function(t){return e.copyHeading("qresizeobserver-api")}}},[e._v("QResizeObserver API")]),s("doc-api",{attrs:{file:"QResizeObserver"}}),s("h2",{staticClass:"doc-heading doc-h2",attrs:{id:"usage"},on:{click:function(t){return e.copyHeading("usage")}}},[e._v("Usage")]),s("doc-example",{attrs:{title:"Basic",file:"QResizeObserver/Basic"}}),s("p",[e._v("Please note that QResizeObserver will issue an event as soon as it gets rendered and attached to DOM, so you can have the initial size of the container.")])],1)},i=[],a=s("8669"),n={name:"DocMarkdownPage",created:function(){this.metaTitle="Resize Observer (for Element)",this.metaDesc="The QResizeObserver Vue component emits a 'resize' event whenever the wrapping DOM element changes its width or height.",this.related=[{name:"Scroll Observer",category:"Observers",path:"/vue-components/scroll-observer"}],this.nav=[{name:"No SSR",category:"Vue Components",path:"/vue-components/no-ssr",dir:"left"},{name:"Scroll Observer",category:"Observers",path:"/vue-components/scroll-observer",dir:"right"}],this.toc=[{id:"qresizeobserver-api",title:"QResizeObserver API"},{id:"usage",title:"Usage"}],this.copyHeading=a["a"]}},o=n,c=s("2877"),l=Object(c["a"])(o,r,i,!1,null,null,null);t["default"]=l.exports}}]);