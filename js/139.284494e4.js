(window["webpackJsonp"]=window["webpackJsonp"]||[]).push([[139],{6283:function(e,t,s){"use strict";s.r(t);var a=function(){var e=this,t=e.$createElement,s=e._self._c||t;return s("doc-page",{attrs:{"meta-title":e.metaTitle,title:"Deploying SSR",nav:e.nav,toc:e.toc,"meta-desc":e.metaDesc}},[s("p",[e._v("When deploying as a SPA or PWA, the distributables folder that gets generated by Quasar CLI can be served by a static webserver. However, this not the case with a SSR (Server-side Render) build. Your distributables, in this case, contain your production webserver too – which can be tweaked from "),s("code",{staticClass:"doc-token"},[e._v("/src-ssr")]),e._v(".")]),s("p",[e._v("By default, the SSR distributables use "),s("doc-link",{attrs:{to:"https://expressjs.com/"}},[e._v("Express")]),e._v(", but you can replace it with your webserver of choice.")],1),s("h2",{staticClass:"doc-heading doc-h2",attrs:{id:"the-distributables-folder"},on:{click:function(t){return e.copyHeading("the-distributables-folder")}}},[e._v("The Distributables Folder")]),s("p",[e._v("After building your app on SSR mode ("),s("code",{staticClass:"doc-token"},[e._v("$ quasar build -m ssr")]),e._v(") the folder that gets generated contains a standalone webserver tweaked for serving with SSR.")]),s("p",[e._v("You’ll notice that it contains a "),s("code",{staticClass:"doc-token"},[e._v("package.json")]),e._v(" file of its own. It has an npm script defined, called “start”:")]),s("pre",{pre:!0,attrs:{class:"doc-code language-js"}},[s("code",{pre:!0,attrs:{class:"doc-code__inner doc-code__inner--prerendered language-js"}},[s("span",{pre:!0,attrs:{class:"token string-property property"}},[e._v('"scripts"')]),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v(":")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("{")]),e._v("\n  "),s("span",{pre:!0,attrs:{class:"token string-property property"}},[e._v('"start"')]),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v(":")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[e._v('"node index.js"')]),e._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("}")]),e._v("\n")])]),s("p",[e._v("So what you need to do when deploying is to copy this distributables folder on your server, yarn/npm install the dependencies inside it, then run "),s("code",{staticClass:"doc-token"},[e._v("$ yarn start")]),e._v(". This boots up the webserver and starts listening for connections.")]),s("div",{staticClass:"doc-note doc-note--tip"},[s("p",{staticClass:"doc-note__title"},[e._v("TIP")]),s("p",[e._v("The distributables folder generated after building your app is standalone. It does NOT require the rest of your project folder to work and it does NOT depend on "),s("code",{staticClass:"doc-token"},[e._v("@quasar/cli")]),e._v(" being installed.")])]),s("h2",{staticClass:"doc-heading doc-h2",attrs:{id:"enhancing-performance"},on:{click:function(t){return e.copyHeading("enhancing-performance")}}},[e._v("Enhancing Performance")]),s("p",[e._v("By default, the webserver runs on only one of the available server’s cores. What you could do is make it use all cores. There is a solution for this: "),s("doc-link",{attrs:{to:"http://pm2.keymetrics.io/"}},[e._v("PM2")]),e._v(".")],1),s("p",[e._v("After installing PM2 on your server, your npm start script can look like this instead:")]),s("pre",{pre:!0,attrs:{class:"doc-code language-js"}},[s("code",{pre:!0,attrs:{class:"doc-code__inner doc-code__inner--prerendered language-js"}},[s("span",{pre:!0,attrs:{class:"token string-property property"}},[e._v('"scripts"')]),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v(":")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("{")]),e._v("\n  "),s("span",{pre:!0,attrs:{class:"token string-property property"}},[e._v('"start"')]),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v(":")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[e._v('"pm2 start index.js"')]),e._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("}")]),e._v("\n")])]),s("h2",{staticClass:"doc-heading doc-h2",attrs:{id:"deploying-with-cleavr"},on:{click:function(t){return e.copyHeading("deploying-with-cleavr")}}},[e._v("Deploying with Cleavr")]),s("p",[e._v("You can use "),s("doc-link",{attrs:{to:"https://cleavr.io"}},[e._v("Cleavr")]),e._v(" to deploy Quasar SSR apps to several popular VPS providers. Cleavr will automatically set up PM2 with cluster mode enabled for your app.")],1),s("p",[e._v("Add a new "),s("strong",[e._v("NodeJS SSR")]),e._v(" site to Cleavr and then configure the web app settings with the following:")]),s("ul",[s("li",[s("strong",[e._v("Entry point:")]),e._v(" index.js")]),s("li",[s("strong",[e._v("Build command:")]),e._v(" npx quasar build --mode ssr")]),s("li",[s("strong",[e._v("Artifact path:")]),e._v(" dist/ssr")])])])},r=[],n=s("8669"),o={name:"DocMarkdownPage",created:function(){this.metaTitle="Deploying SSR",this.metaDesc="How to publish a Quasar server-side rendered app.",this.nav=[{name:"Build Commands",category:"Developing SSR",path:"/quasar-cli/developing-ssr/build-commands",dir:"left"},{name:"Introduction",category:"Developing PWA",path:"/quasar-cli/developing-pwa/introduction",dir:"right"}],this.toc=[{id:"the-distributables-folder",title:"The Distributables Folder"},{id:"enhancing-performance",title:"Enhancing Performance"},{id:"deploying-with-cleavr",title:"Deploying with Cleavr"}],this.copyHeading=n["a"]}},i=o,c=s("2877"),l=Object(c["a"])(i,a,r,!1,null,null,null);t["default"]=l.exports}}]);