(window["webpackJsonp"]=window["webpackJsonp"]||[]).push([[45],{e44c:function(t,e,n){"use strict";n.r(e);var s=function(){var t=this,e=t.$createElement,n=t._self._c||e;return n("doc-page",{attrs:{"meta-title":t.metaTitle,title:"Icon Genie CLI Command List",nav:t.nav,toc:t.toc,"meta-desc":t.metaDesc}},[n("p",[t._v("Familiarize yourself with the list of available Icon Genie CLI commands inside a Quasar project folder:")]),n("pre",{pre:!0,attrs:{class:"doc-code language-bash"}},[n("code",{pre:!0,attrs:{class:"doc-code__inner doc-code__inner--prerendered language-bash"}},[t._v("$ icongenie\n\n  Example usage\n    $ icongenie "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("command"),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("options"),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v("\n\n  Help "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),t._v(" a "),n("span",{pre:!0,attrs:{class:"token builtin class-name"}},[t._v("command")]),t._v("\n    $ icongenie "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("command"),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" --help\n    $ icongenie "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("command"),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" -h\n\n  Options\n    --version, -v Print Quasar Icon Genie CLI version\n\n  Commands\n    generate, g   Generate App icons "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),t._v(" splash screens\n    verify, "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("v")]),t._v("     Verify your Quasar app's icons "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),t._v("\n                    splash screens\n    profile, p    Create Icon Genie profile files\n    help, h       Display this message\n")])]),n("p",[t._v("See help for any command:")]),n("pre",{pre:!0,attrs:{class:"doc-code language-bash"}},[n("code",{pre:!0,attrs:{class:"doc-code__inner doc-code__inner--prerendered language-bash"}},[t._v("$ icongenie "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("command_name"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" --help\n")])]),n("h2",{staticClass:"doc-heading doc-h2",attrs:{id:"generate"},on:{click:function(e){return t.copyHeading("generate")}}},[t._v("Generate")]),n("p",[t._v("The "),n("code",{staticClass:"doc-token"},[t._v("generate")]),t._v(" command is used for generating app icons and splash screens. It’s at the heart of Icon Genie as it does the heavy lifting.")]),n("p",[t._v("Take a look below at usage and some examples. The most important parameter to note is "),n("code",{staticClass:"doc-token"},[t._v("--icon")]),t._v(" (or "),n("code",{staticClass:"doc-token"},[t._v("-i")]),t._v("), which takes a transparent PNG as input for your app’s icons and splash screens. Minimum size of the PNG is 64x64px, but it is highly recommended to go above 1024x1024px.")]),n("p",[t._v("For splash screens, you may want to combine it with the "),n("code",{staticClass:"doc-token"},[t._v("--background")]),t._v(" (or "),n("code",{staticClass:"doc-token"},[t._v("-b")]),t._v(") if you want your icon to be placed on top of a background.")]),n("p",[t._v("You may also want to use the "),n("code",{staticClass:"doc-token"},[t._v("--profile")]),t._v(" (or "),n("code",{staticClass:"doc-token"},[t._v("-p")]),t._v(") parameter, which can run one or more Icon Genie "),n("doc-link",{attrs:{to:"/icongenie/profile-files"}},[t._v("profile files")]),t._v(".")],1),n("pre",{pre:!0,attrs:{class:"doc-code language-bash"}},[n("code",{pre:!0,attrs:{class:"doc-code__inner doc-code__inner--prerendered language-bash"}},[t._v("$ icongenie generate -h\n\n  Description\n    Generate App icons "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),t._v(" splash screens\n\n  Usage\n    $ icongenie generate "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("options"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n\n    "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# generate icons for all installed Quasar modes")]),t._v("\n    $ icongenie generate -i /path/to/icon.png\n    $ icongenie g -i /path/to/icon.png\n\n    "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# generate for (as example) PWA mode only")]),t._v("\n    $ icongenie generate -m pwa --icon /path/to/icon.png\n\n    "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# generate for (as example) Cordova & Capacitor mode only")]),t._v("\n    $ icongenie g -m cordova,capacitor -i\n         /path/to/icon.png -b /path/to/background.png\n\n    "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# generate by using a profile file")]),t._v("\n    $ icongenie generate -p ./icongenie-profile.json\n\n    "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# generate by using batch of profile files")]),t._v("\n    $ icongenie generate -p ./folder-containing-profile-files\n\n  Options\n    --icon, -i            Required"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n                          Path to "),n("span",{pre:!0,attrs:{class:"token builtin class-name"}},[t._v("source")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("file")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),t._v(" icon"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" must be:\n                            - a .png "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("file")]),t._v("\n                            - min resolution: 64x64 px "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("the higher the better"),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("!")]),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("!")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n                            - with transparency\n                          Best results are with a square image "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("height "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" width"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n                          Image will be trimmed automatically\n                            "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("also see "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"skip-trim"')]),t._v(" and "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"padding"')]),t._v(" param"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n                          Path can be absolute, or relative to the root of the\n                            Quasar project folder\n                          Recommended min size: 1024x1024 px\n\n    --background, -b      Path to optional background "),n("span",{pre:!0,attrs:{class:"token builtin class-name"}},[t._v("source")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("file")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("for splash screens"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n                          must be:\n                            - a .png "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("file")]),t._v("\n                            - min resolution: 128x128 px "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("the higher the better"),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("!")]),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("!")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n                            - transparency is optional "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("but recommended "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" you\n                              combine with the splashscreen-color param"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n                          Path can be absolute, or relative to the root of the\n                            Quasar project folder\n                          Recommended min size: 1024x1024 px\n\n    --mode, -m            For "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("which")]),t._v(" Quasar mode"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("s"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" to generate the assets"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n                          Default: all\n                            "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("all"),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v("spa"),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v("pwa"),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v("ssr"),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v("bex"),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v("cordova"),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v("capacitor"),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v("electron"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n                          Multiple can be specified, separated by "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('","')]),n("span",{pre:!0,attrs:{class:"token builtin class-name"}},[t._v(":")]),t._v("\n                            spa,cordova\n\n    --filter, -f          Filter the available generators"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" when used, it can\n                          generate only one "),n("span",{pre:!0,attrs:{class:"token builtin class-name"}},[t._v("type")]),t._v(" of asset instead of all\n                            "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("png"),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v("ico"),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v("icns"),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v("splashscreen"),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v("svg"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n\n    --quality             Quality of the files "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v(" - "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("12")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("default: "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("5")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n                            - higher quality --"),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" bigger filesize "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),t._v(" slower to create\n                            - lower quality  --"),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" smaller filesize "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),t._v(" faster to create\n\n    --skip-trim           Do not trim the icon "),n("span",{pre:!0,attrs:{class:"token builtin class-name"}},[t._v("source")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("file")]),t._v("\n\n    --padding             Apply fixed padding to the icon after trimming it"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n                          Syntax: "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("horiz: number"),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(","),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("vert: number"),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v("\n                          Default: "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("0,0")]),t._v("\n                          Example: "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"--padding 10,5"')]),t._v(" means apply 10px padding to "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("top")]),t._v("\n                            10px to bottom, 5px to left side and 5px to rightside\n\n    --theme-color         Theme color to use "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),t._v(" all generators requiring a color"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n                          It gets overridden "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" any generator color is also specified"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n                          The color must be "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("in")]),t._v(" hex "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("format")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("NOT hexa"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" without the leading\n                          "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v("'#'")]),t._v(" character. Transparency not allowed.\n                          Examples: 1976D2, eee\n\n    --svg-color           Color to use "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),t._v(" the generated monochrome svgs\n                          Default "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("if no theme-color is specified"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(": 1976D2\n                          The color must be "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("in")]),t._v(" hex "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("format")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("NOT hexa"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" without the leading\n                          "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v("'#'")]),t._v(" character. Transparency not allowed.\n                          Examples: 1976D2, eee\n\n    --png-color           Background color to use "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),t._v(" the png generator, when\n                          "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"background: true"')]),t._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("in")]),t._v(" the asset definition "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("like "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),t._v("\n                          the cordova/capacitor iOS icons"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n                          Default "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("if no theme-color is specified"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(": fff\n                          The color must be "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("in")]),t._v(" hex "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("format")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("NOT hexa"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" without the leading\n                          "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v("'#'")]),t._v(" character. Transparency not allowed.\n                          Examples: 1976D2, eee\n\n    --splashscreen-color  Background color to use "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),t._v(" the splashscreen generator"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n                          Default "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("if no theme-color is specified"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(": fff\n                          The color must be "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("in")]),t._v(" hex "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("format")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("NOT hexa"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" without the leading\n                          "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v("'#'")]),t._v(" character. Transparency not allowed.\n                          Examples: 1976D2, eee\n\n    --splashscreen-icon-ratio  Ratio of icon size "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("in")]),t._v(" respect to the width or height\n                               "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("whichever is smaller"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" of the resulting splashscreen"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n                               Represents percentages"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" Valid values: "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),t._v(" - "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("100")]),t._v("\n                               If "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("then")]),t._v(" it doesn't "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("add")]),t._v(" the icon of "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("top")]),t._v(" of background\n                               Default: "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("40")]),t._v("\n\n    --profile, -p         Use JSON profile file"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("s"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(":\n                            - path to folder "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("absolute or relative to current folder"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n                              that contains JSON profile files "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("icongenie-*.json"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n                            - path to a single *.json profile "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("file")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("absolute or relative\n                              to current folder"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n                          Structure of a JSON profile file:\n                            "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n                              "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"params"')]),n("span",{pre:!0,attrs:{class:"token builtin class-name"}},[t._v(":")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n                                "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"include"')]),n("span",{pre:!0,attrs:{class:"token builtin class-name"}},[t._v(":")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("..")]),t._v(". "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(", /* optional */\n                                "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("..")]),t._v(".\n                              "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(",\n                              "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"assets"')]),n("span",{pre:!0,attrs:{class:"token builtin class-name"}},[t._v(":")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v(" /* list of custom assets */ "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n                            "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n    --help, -h            Displays this message\n")])]),n("h2",{staticClass:"doc-heading doc-h2",attrs:{id:"verify"},on:{click:function(e){return t.copyHeading("verify")}}},[t._v("Verify")]),n("p",[t._v("The "),n("code",{staticClass:"doc-token"},[t._v("verify")]),t._v(" command confirms that you have all required app icons and splash screens in the right place and that each file has the correct resolution in pixels.")]),n("pre",{pre:!0,attrs:{class:"doc-code language-bash"}},[n("code",{pre:!0,attrs:{class:"doc-code__inner doc-code__inner--prerendered language-bash"}},[t._v("$ icongenie -h\n\n  Description\n    Verifies your Quasar App's icons and splash screens\n    "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),t._v(" all installed modes.\n\n  Usage\n    $ icongenie verify "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("options"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n\n    "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# verify all Quasar modes")]),t._v("\n    $ icongenie verify\n\n    "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# verify specific mode")]),t._v("\n    $ icongenie verify -m spa\n\n    "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# verify with specific filter")]),t._v("\n    $ icongenie verify -f ico\n\n    "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# verify by using a profile file")]),t._v("\n    $ icongenie verify -p ./icongenie-profile.json\n\n    "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# verify by using batch of profile files")]),t._v("\n    $ icongenie verify -p ./folder-containing-profile-files\n\n  Options\n    --mode, -m      For "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("which")]),t._v(" Quasar mode"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("s"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" to verify the assets"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n                    Default: all\n                      "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("all"),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v("spa"),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v("pwa"),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v("ssr"),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v("bex"),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v("cordova"),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v("capacitor"),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v("electron"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n                    Multiple can be specified, separated by "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('","')]),n("span",{pre:!0,attrs:{class:"token builtin class-name"}},[t._v(":")]),t._v("\n                      spa,cordova,capacitor\n\n    --filter, -f    Filter the available generators"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" when used, it verifies\n                    only one "),n("span",{pre:!0,attrs:{class:"token builtin class-name"}},[t._v("type")]),t._v(" of asset instead of all\n                      "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("png"),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v("ico"),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v("icns"),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v("splashscreen"),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v("svg"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n\n    --profile       Use JSON profile file"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("s"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" to extract the asset list to verify:\n                      - path to folder "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("absolute or relative to current folder"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n                        that contains JSON profile files "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("icongenie-*.json"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n                      - path to a single *.json profile "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("file")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("absolute or relative\n                        to current folder"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n                    Structure of a JSON profile file:\n                      "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n                        "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"params"')]),n("span",{pre:!0,attrs:{class:"token builtin class-name"}},[t._v(":")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n                          "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"include"')]),n("span",{pre:!0,attrs:{class:"token builtin class-name"}},[t._v(":")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("..")]),t._v(". "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(", /* optional */\n                          "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("..")]),t._v(".\n                        "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(",\n                        "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"assets"')]),n("span",{pre:!0,attrs:{class:"token builtin class-name"}},[t._v(":")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v(" /* list of custom assets */ "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n                      "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n    --help, -h      Displays this message\n")])]),n("h2",{staticClass:"doc-heading doc-h2",attrs:{id:"profile"},on:{click:function(e){return t.copyHeading("profile")}}},[t._v("Profile")]),n("p",[t._v("Icon Genie also supports profile files. These files are in JSON format and tell Icon Genie which images to generate and how to generate them. The "),n("code",{staticClass:"doc-token"},[t._v("profile")]),t._v(" command is a helper to scaffold these profiles. They are very useful for automation, if needed.")]),n("p",[t._v("The generic form of a JSON profile file is:")]),n("pre",{pre:!0,attrs:{class:"doc-code language-json"}},[n("code",{pre:!0,attrs:{class:"doc-code__inner doc-code__inner--prerendered language-json"}},[n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),n("span",{pre:!0,attrs:{class:"token property"}},[t._v('"params"')]),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  "),n("span",{pre:!0,attrs:{class:"token property"}},[t._v('"assets"')]),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])]),n("p",[t._v("You can also generate multiple profile files (with different params/settings). For more information please head on to the "),n("doc-link",{attrs:{to:"/icongenie/profile-files"}},[t._v("Profile files")]),t._v(" page.")],1),n("pre",{pre:!0,attrs:{class:"doc-code language-bash"}},[n("code",{pre:!0,attrs:{class:"doc-code__inner doc-code__inner--prerendered language-bash"}},[t._v("$ icongenie profile -h\n\n  Description\n    Helper "),n("span",{pre:!0,attrs:{class:"token builtin class-name"}},[t._v("command")]),t._v(" to easily bootstrap Icon Genie profile files.\n\n  Usage\n    $ icongenie profile -o "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("filename"),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("options"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n\n    "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# supplying params list")]),t._v("\n    $ icongenie profile -o "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("filename"),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" --include pwa,spa --quality "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("7")]),t._v("\n\n    "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# supplying assets based on Icon Genie's internal list")]),t._v("\n    $ icongenie profile -o "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("filename"),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" --assets spa,bex\n\n  Options\n    --output, -o          Name of the new Icon Genie profile "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("file")]),t._v("\n\n    --assets, -a          Prefill the assets Array with Icon Genie"),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('\'s\n                          internal list, based on the modes that you indicate;\n                            [all|spa|pwa|ssr|bex|cordova|capacitor|electron]\n                          Multiple can be specified, separated by ",":\n                            spa,cordova\n\n    --icon, -i            Path to source file for icons; must be:\n                            - a .png file\n                            - min resolution: 64x64 px (the higher the better!!)\n                            - with transparency\n                          Best results are with a square image (height = width)\n                          Image will be trimmed automatically\n                            (also see "skip-trim" and "padding" param)\n                          Path can be absolute, or relative to the root of the\n                            Quasar project folder\n                          Recommended min size: 1024x1024 px\n\n    --background, -b      Path to optional background source file (for splash screens);\n                          must be:\n                            - a .png file\n                            - min resolution: 128x128 px (the higher the better!!)\n                            - transparency is optional (but recommended if you\n                              combine with the splashscreen-color param)\n                          Path can be absolute, or relative to the root of the\n                            Quasar project folder\n                          Recommended min size: 1024x1024 px\n\n    --include             Prefill the params.include property;\n                            [all|spa|pwa|ssr|bex|cordova|capacitor|electron]\n                          Multiple can be specified, separated by ",":\n                            spa,cordova\n\n    --filter, -f          Prefill the params.filter property;\n                            [png|ico|icns|splashscreen|svg]\n\n    --quality             Prefill in the params.quality property;\n                          Quality of the files [1 - 12] (default: 5)\n                            - higher quality --\x3e bigger filesize & slower to create\n                            - lower quality  --\x3e smaller filesize & faster to create\n\n    --skip-trim           Do not trim the icon source file\n\n    --padding             Apply fixed padding to the icon after trimming it;\n                          Syntax: <horiz: number>,<vert: number>\n                          Default: 0,0\n                          Example: "--padding 10,5" means apply 10px padding to top\n                            10px to bottom, 5px to left side and 5px to rightside\n\n    --theme-color         Prefill the params.themeColor property;\n                          Theme color to use for all generators requiring a color;\n                          It gets overridden if any generator color is also specified;\n                          The color must be in hex format (NOT hexa) without the leading\n                          \'')]),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#' character. Transparency not allowed.")]),t._v("\n                          Examples: 1976D2, eee\n\n    --svg-color           Prefill the params.svgColor property"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n                          Color to use "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),t._v(" the generated monochrome svgs\n                          Default "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("if no theme-color is specified"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(": 1976D2\n                          The color must be "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("in")]),t._v(" hex "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("format")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("NOT hexa"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" without the leading\n                          "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v("'#'")]),t._v(" character. Transparency not allowed.\n                          Examples: 1976D2, eee\n\n    --png-color           Prefill the params.pngColor property"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n                          Background color to use "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),t._v(" the png generator, when\n                          "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"background: true"')]),t._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("in")]),t._v(" the asset definition "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("like "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),t._v("\n                          the Cordova/Capacitor iOS icons"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n                          Default "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("if no theme-color is specified"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(": fff\n                          The color must be "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("in")]),t._v(" hex "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("format")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("NOT hexa"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" without the leading\n                          "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v("'#'")]),t._v(" character. Transparency not allowed.\n                          Examples: 1976D2, eee\n\n    --splashscreen-color  Prefill the params.splashscreenColor property"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n                          Background color to use "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),t._v(" the splashscreen generator"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n                          Default "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("if no theme-color is specified"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(": fff\n                          The color must be "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("in")]),t._v(" hex "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("format")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("NOT hexa"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" without the leading\n                          "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v("'#'")]),t._v(" character. Transparency not allowed.\n                          Examples: 1976D2, eee\n\n    --splashscreen-icon-ratio  Prefill the params.splashscreenIconRatio property"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n                               Ratio of icon size "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("in")]),t._v(" respect to the width or height\n                               "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("whichever is smaller"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" of the resulting splashscreen"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n                               Represents percentages"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" Valid values: "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),t._v(" - "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("100")]),t._v("\n                               If "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("then")]),t._v(" it doesn't "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("add")]),t._v(" the icon of "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("top")]),t._v(" of background\n                               Default: "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("40")]),t._v("\n")])])])},a=[],r=n("8669"),o={name:"DocMarkdownPage",created:function(){this.metaTitle="Icon Genie CLI Command List",this.metaDesc="Command list for Icon Genie CLI.",this.nav=[{name:"Installation / Upgrade notes",category:"Icon Genie CLI",path:"/icongenie/installation",dir:"left"},{name:"App Icons List",category:"Icon Genie CLI",path:"/icongenie/app-icons-list",dir:"right"}],this.toc=[{id:"generate",title:"Generate"},{id:"verify",title:"Verify"},{id:"profile",title:"Profile"}],this.copyHeading=r["a"]}},p=o,c=n("2877"),i=Object(c["a"])(p,s,a,!1,null,null,null);e["default"]=i.exports}}]);