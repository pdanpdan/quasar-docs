(window["webpackJsonp"]=window["webpackJsonp"]||[]).push([[72],{"6bec":function(t,a,s){"use strict";s.r(a);var n=function(){var t=this,a=t._self._c;return a("doc-page",{attrs:{"meta-title":t.metaTitle,title:"RTL Support",related:t.related,nav:t.nav,toc:t.toc,"meta-desc":t.metaDesc}},[a("p",[t._v("RTL is referring to “right to left” UI for languages that need it.")]),a("h2",{staticClass:"doc-heading doc-h2",attrs:{id:"enabling-rtl-support"},on:{click:function(a){return t.copyHeading("enabling-rtl-support")}}},[t._v("Enabling RTL support")]),a("p",[t._v("To enable it, you need to edit "),a("code",{staticClass:"doc-token"},[t._v("/quasar.conf.js")]),t._v(":")]),a("pre",{pre:!0,attrs:{class:"doc-code language-js"}},[a("code",{pre:!0,attrs:{class:"doc-code__inner doc-code__inner--prerendered language-js"}},[a("span",{pre:!0,attrs:{class:"token literal-property property"}},[t._v("build")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token literal-property property"}},[t._v("rtl")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("true")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])]),a("h2",{staticClass:"doc-heading doc-h2",attrs:{id:"how-it-works"},on:{click:function(a){return t.copyHeading("how-it-works")}}},[t._v("How it works")]),a("p",[t._v("RTL is tightly coupled to "),a("doc-link",{attrs:{to:"/options/quasar-language-packs"}},[t._v("Quasar Language Packs")]),t._v(". "),a("strong",[t._v("When Quasar is set to use an RTL language")]),t._v(" (language pack has “rtl” prop set to “true”) and "),a("strong",[t._v("RTL support is enabled")]),t._v(" (check step above for quasar.conf.js), then the UI will dynamically transform Quasar & your website/app code for RTL.")],1),a("p",[t._v("Let’s discuss about each of these requirements:")]),a("ol",[a("li",[a("p",[a("em",[t._v("Quasar needs to be set to use an RTL language")]),t._v(".\nSee "),a("doc-link",{attrs:{to:"/options/quasar-language-packs"}},[t._v("Quasar Language Packs")]),t._v(" on how you can set a language. You can set a language as default or dynamically set one.")],1)]),a("li",[a("p",[a("em",[t._v("RTL support needs to be enabled")]),t._v(".\nYou need to set “rtl” to “true” under quasar.conf.js > “build”. What this does is it compiles CSS for both your website/app code and for Quasar components and add corresponding RTL CSS rules automatically. Your CSS bundle will slightly increase in size due to the addition of these CSS rules.")])]),a("li",[a("p",[t._v("Optional: "),a("em",[t._v("Enable fromRTL flag")]),t._v(".\nBy default, Quasar assumes that all styles are written in LTR direction and generates corresponding RTL styles for them. Should you wish to write your own css directly in RTL then you need to set quasar.conf.js > “build” > rtl > “fromRTL” to "),a("code",{staticClass:"doc-token"},[t._v("true")]),t._v(".")])])]),a("h2",{staticClass:"doc-heading doc-h2",attrs:{id:"things-to-keep-in-mind"},on:{click:function(a){return t.copyHeading("things-to-keep-in-mind")}}},[t._v("Things to keep in mind")]),a("ul",[a("li",[t._v("Both RTL and non-RTL Quasar language packs will work together and dynamically switch to/from RTL. So only choosing an RTL Quasar language pack will trigger the RTL UI for you. You don’t need separate builds of your app (one for non-RTL and one for RTL-only). The RTL is dynamically changed for you automatically.")]),a("li",[t._v("You can dynamically detect if you are on RTL mode by taking a look at Boolean "),a("code",{staticClass:"doc-token"},[t._v("this.$q.lang.rtl")]),t._v(". More info on "),a("doc-link",{attrs:{to:"/options/vue-prototype-injections"}},[t._v("Vue Prototype Injections")]),t._v(".")],1),a("li",[t._v("You need to be careful when writing your own CSS. Like mentioned above, Quasar will automatically add RTL (LTR if quasar.conf.js > build > rtl > fromRTL is set to true) rules based on your CSS code. So writing:")])]),a("pre",{pre:!0,attrs:{class:"doc-code language-css"}},[a("code",{pre:!0,attrs:{class:"doc-code__inner doc-code__inner--prerendered language-css"}},[a("span",{pre:!0,attrs:{class:"token selector"}},[t._v(".my-class")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token property"}},[t._v("margin-left")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" 10px"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token property"}},[t._v("right")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" 5px"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])]),a("p",[t._v("…will add this rule for RTL:")]),a("pre",{pre:!0,attrs:{class:"doc-code language-css"}},[a("code",{pre:!0,attrs:{class:"doc-code__inner doc-code__inner--prerendered language-css"}},[a("span",{pre:!0,attrs:{class:"token selector"}},[t._v("[dir=rtl] .my-class")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token property"}},[t._v("margin-right")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" 10px"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token property"}},[t._v("left")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" 5px"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])]),a("p",[t._v("Any CSS rule that refers to “left” or “right” is automatically triggering an equivalent RTL CSS rule to be added.")]),a("h3",{staticClass:"doc-heading doc-h3",attrs:{id:"marking-css-rules-as-exceptions"},on:{click:function(a){return t.copyHeading("marking-css-rules-as-exceptions")}}},[t._v("Marking CSS rules as exceptions")]),a("p",[t._v("If you need an exception so your CSS code will not add a corresponding RTL rule, then add this comment:")]),a("pre",{pre:!0,attrs:{class:"doc-code language-css"}},[a("code",{pre:!0,attrs:{class:"doc-code__inner doc-code__inner--prerendered language-css"}},[a("span",{pre:!0,attrs:{class:"token selector"}},[t._v(".my-class")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token property"}},[t._v("margin-left")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" 10px "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/* rtl:ignore */")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])]),a("p",[t._v("…or, if you are using Stylus:")]),a("pre",{pre:!0,attrs:{class:"doc-code language-css"}},[a("code",{pre:!0,attrs:{class:"doc-code__inner doc-code__inner--prerendered language-css"}},[t._v(".my-class\n  margin-left 10px "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/* rtl:ignore */")]),t._v("\n")])]),a("p",[t._v("…or SCSS with indented form:")]),a("pre",{pre:!0,attrs:{class:"doc-code language-css"}},[a("code",{pre:!0,attrs:{class:"doc-code__inner doc-code__inner--prerendered language-css"}},[a("span",{pre:!0,attrs:{class:"token selector"}},[t._v(".my-class\n  margin-left: 10px #")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"/* rtl:ignore */"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])]),a("p",[t._v("…or default SCSS:")]),a("pre",{pre:!0,attrs:{class:"doc-code language-css"}},[a("code",{pre:!0,attrs:{class:"doc-code__inner doc-code__inner--prerendered language-css"}},[a("span",{pre:!0,attrs:{class:"token selector"}},[t._v(".my-class")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token selector"}},[t._v("margin-left: 10px #")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"/* rtl:ignore */"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])]),a("p",[t._v("Now both RTL and non-RTL UI mode will have "),a("code",{staticClass:"doc-token"},[t._v("margin-left")]),t._v(" prop.")]),a("p",[t._v("Sometimes you’ll need to make exceptions for whole DOM elements / components. In this case, add "),a("code",{staticClass:"doc-token"},[t._v('dir="ltr"')]),t._v(" or "),a("code",{staticClass:"doc-token"},[t._v('dir="rtl"')]),t._v(" HTML attribute to the outermost DOM element / component template:")]),a("pre",{pre:!0,attrs:{class:"doc-code language-html"}},[a("code",{pre:!0,attrs:{class:"doc-code__inner doc-code__inner--prerendered language-html"}},[a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),t._v("div")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("dir")]),a("span",{pre:!0,attrs:{class:"token attr-value"}},[a("span",{pre:!0,attrs:{class:"token punctuation attr-equals"}},[t._v("=")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v('"')]),t._v("rtl"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v('"')])]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("\x3c!--\n    this DIV and all its content will use RTL mode\n    regardless of Quasar language pack RTL settings\n  --\x3e")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("</")]),t._v("div")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n")])]),a("p",[t._v("Or, if you need your RTL UI to use left-to-right (ltr) mode for a DOM element / component:")]),a("pre",{pre:!0,attrs:{class:"doc-code language-html"}},[a("code",{pre:!0,attrs:{class:"doc-code__inner doc-code__inner--prerendered language-html"}},[a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),t._v("div")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("dir")]),a("span",{pre:!0,attrs:{class:"token attr-value"}},[a("span",{pre:!0,attrs:{class:"token punctuation attr-equals"}},[t._v("=")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v('"')]),t._v("ltr"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v('"')])]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("\x3c!--\n    this DIV and all its content will use non-RTL mode\n    regardless of Quasar language pack RTL settings\n  --\x3e")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("</")]),t._v("div")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n")])]),a("h2",{staticClass:"doc-heading doc-h2",attrs:{id:"handling-quasar-umd"},on:{click:function(a){return t.copyHeading("handling-quasar-umd")}}},[t._v("Handling Quasar UMD")]),a("p",[t._v("To enable RTL UIs in UMD you need to include the RTL equivalent CSS tag for your Quasar version and also pack in a Quasar RTL language pack (like Hebrew or Farsi). Example:")]),a("pre",{pre:!0,attrs:{class:"doc-code language-html"}},[a("code",{pre:!0,attrs:{class:"doc-code__inner doc-code__inner--prerendered language-html"}},[a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),t._v("html")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),t._v("head")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n    ...\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v('\x3c!-- Replace "1.0.0" (below) with your Quasar version. --\x3e')]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),t._v("link")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("href")]),a("span",{pre:!0,attrs:{class:"token attr-value"}},[a("span",{pre:!0,attrs:{class:"token punctuation attr-equals"}},[t._v("=")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v('"')]),t._v("https://cdn.jsdelivr.net/gh/pdanpdan/quasar@quasar-pdan-<version>/dist/quasar.rtl.min.css"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v('"')])]),t._v(" "),a("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("rel")]),a("span",{pre:!0,attrs:{class:"token attr-value"}},[a("span",{pre:!0,attrs:{class:"token punctuation attr-equals"}},[t._v("=")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v('"')]),t._v("stylesheet"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v('"')])]),t._v(" "),a("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("type")]),a("span",{pre:!0,attrs:{class:"token attr-value"}},[a("span",{pre:!0,attrs:{class:"token punctuation attr-equals"}},[t._v("=")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v('"')]),t._v("text/css"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v('"')])]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("</")]),t._v("head")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n\n  "),a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),t._v("body")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n    ...\n\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v('\x3c!--\n      We also need an RTL Quasar language pack; let\'s take Hebrew as an example;\n      include this after Quasar JS tag;\n      Replace "1.0.0" (below) with your Quasar version.\n    --\x3e')]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),t._v("script")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("src")]),a("span",{pre:!0,attrs:{class:"token attr-value"}},[a("span",{pre:!0,attrs:{class:"token punctuation attr-equals"}},[t._v("=")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v('"')]),t._v("https://cdn.jsdelivr.net/gh/pdanpdan/quasar@quasar-pdan-<version>/dist/lang/he.umd.min.js"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v('"')])]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("</")]),t._v("script")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),t._v("script")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),a("span",{pre:!0,attrs:{class:"token script"}},[a("span",{pre:!0,attrs:{class:"token language-javascript"}},[t._v("\n      Quasar"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("lang"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("set")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("Quasar"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("lang"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("he"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    ")])]),a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("</")]),t._v("script")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("</")]),t._v("body")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("</")]),t._v("html")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n")])]),a("p",[t._v("Check what tags you need to include in your HTML files by using our "),a("doc-link",{attrs:{to:"/start/umd"}},[t._v("UMD tag generator")]),t._v(" and making sure that you tick the “RTL CSS support” checkbox.\nAlso notice the "),a("code",{staticClass:"doc-token"},[t._v('<html dir="rtl">')]),t._v(" tag at the beginning of the generated html file – you’ll need that too.")],1),a("div",{staticClass:"doc-note doc-note--warning"},[a("p",{staticClass:"doc-note__title"},[t._v("CAVEAT")]),a("p",[t._v("Quasar CLI automatically adds equivalent RTL CSS rules for your website/app code, but this is not the case for UMD where Quasar CLI is not being used. You’ll have to manage writing the RTL equivalent of your website/app CSS code by yourself. It’s only Quasar components that will have this handled automatically.")])])])},e=[],r=s("8669"),o={name:"DocMarkdownPage",created:function(){this.metaTitle="RTL Support",this.metaDesc="Right to left support in a Quasar app.",this.related=[{name:"Quasar Language Packs",category:"Quasar Options & Helpers",path:"/options/quasar-language-packs"},{name:"App Internationalization",category:"Quasar Options & Helpers",path:"/options/app-internationalization"}],this.nav=[{name:"App Internationalization",category:"Quasar Options & Helpers",path:"/options/app-internationalization",dir:"left"},{name:"Installing Icon Libraries",category:"Quasar Options & Helpers",path:"/options/installing-icon-libraries",dir:"right"}],this.toc=[{id:"enabling-rtl-support",title:"Enabling RTL support"},{id:"how-it-works",title:"How it works"},{id:"things-to-keep-in-mind",title:"Things to keep in mind"},{id:"marking-css-rules-as-exceptions",title:"Marking CSS rules as exceptions",sub:!0},{id:"handling-quasar-umd",title:"Handling Quasar UMD"}],this.copyHeading=r["a"]}},p=o,c=s("2877"),l=Object(c["a"])(p,n,e,!1,null,null,null);a["default"]=l.exports}}]);